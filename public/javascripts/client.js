// Generated by CoffeeScript 1.4.0
(function() {

  jQuery(function() {
    var Contact, DetailView, Directory, DirectoryRow, DirectoryView, detail, directory, searchMatch,
      _this = this;
    _.templateSettings = {
      interpolate: /\{\{(.+?)\}\}/g
    };
    Contact = Backbone.Model.extend({
      idAttribute: "profile_id"
    });
    Directory = Backbone.Collection.extend({
      model: Contact,
      url: './api/contacts',
      comparator: function(contact) {
        return contact.get('name').toLowerCase();
      }
    });
    DirectoryRow = Backbone.View.extend({
      tagName: "li",
      className: "directory-row",
      template: $("#directoryRowTemplate").html(),
      events: {
        'click': 'selectContact'
      },
      selectContact: function(e) {
        e.preventDefault();
        return detail.showContact(this.model);
      },
      render: function() {
        var tmpl;
        tmpl = _.template(this.template);
        this.$el.html(tmpl(this.model.toJSON()));
        return this;
      }
    });
    DirectoryView = Backbone.View.extend({
      el: $("#directory"),
      initialize: function() {
        var that;
        that = this;
        this.collection = new Directory();
        return this.collection.fetch({
          success: function() {
            console.log("Fetched directory list!");
            return that.render();
          },
          error: function() {}
        }, console.log("Error fetching data for directory list."));
      },
      render: function(filter) {
        var that;
        $("#directory").html("");
        that = this;
        return _.each(this.collection.models, function(item) {
          if (!((filter != null) && !searchMatch(item, filter))) {
            return that.renderContact(item);
          }
        }, this);
      },
      renderContact: function(item) {
        var directoryRow;
        directoryRow = new DirectoryRow({
          model: item
        });
        return this.$el.append(directoryRow.render().el);
      }
    });
    DetailView = Backbone.View.extend({
      el: $("#contact"),
      template: $("#contactDetailTemplate").html(),
      showContact: function(model) {
        this.model = model;
        return this.render();
      },
      render: function() {
        var tmpl;
        tmpl = _.template(this.template);
        this.$el.html(tmpl(this.model.toJSON()));
        return this;
      }
    });
    directory = new DirectoryView();
    detail = new DetailView();
    $("#filter").on('keyup', function(e) {
      console.log("YEAH YEAH");
      e.preventDefault();
      return directory.render($("#filter").val());
    });
    $("form").on('submit', function(e) {
      e.preventDefault();
      return false;
    });
    return searchMatch = function(item, filter) {
      var email, isMatch, phone, _i, _j, _len, _len1, _ref, _ref1;
      filter = filter.toLowerCase();
      isMatch = false;
      if (item.attributes.name.toLowerCase().match(filter) != null) {
        isMatch = true;
      }
      if ((item.attributes.phone != null) && (item.attributes.phone.length != null)) {
        _ref = item.attributes.phone;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          phone = _ref[_i];
          if (phone.replace(/\(|\)|\-|\ /g, "").match(filter.replace(/\(|\)|\-|\ /g, "")) != null) {
            isMatch = true;
          }
        }
      }
      if ((item.attributes.email != null) && (item.attributes.email.length != null)) {
        _ref1 = item.attributes.email;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          email = _ref1[_j];
          if (email.toLowerCase().match(filter)) {
            isMatch = true;
          }
        }
      }
      return isMatch;
    };
  });

}).call(this);
