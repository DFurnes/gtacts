// Generated by CoffeeScript 1.4.0
(function() {
  var GoogleStrategy, User, app, conf, ejs, ensureAuthenticated, express, fs, getPhoto, http, https, mongoose, passport, path, qs, refreshContacts, refreshToken, routes, userSchema, util;

  express = require('express');

  ejs = require('ejs');

  routes = require('./routes');

  http = require('http');

  https = require('https');

  qs = require('qs');

  path = require('path');

  util = require('util');

  fs = require('fs');

  mongoose = require('mongoose');

  passport = require('passport');

  GoogleStrategy = require('passport-google-oauth').OAuth2Strategy;

  conf = require('./conf');

  mongoose.connect(conf.mongodb.hostname, conf.mongodb.dbname);

  mongoose.connection.on('error', function() {
    return console.error('Mongoose connection error: check that mongod is running.');
  });

  userSchema = new mongoose.Schema({
    _id: String,
    profile_id: String,
    name: String,
    accessToken: String,
    refreshToken: String
  });

  userSchema.path('profile_id').set(function() {
    this._id = 'user_' + v;
    return v;
  });

  User = mongoose.model('User', userSchema);

  passport.serializeUser(function(user, done) {
    return done(null, user);
  });

  passport.deserializeUser(function(obj, done) {
    return done(null, obj);
  });

  passport.use(new GoogleStrategy({
    clientID: conf.google.clientID,
    clientSecret: conf.google.clientSecret,
    callbackURL: "http://localhost:3000/auth/google/callback",
    passReqToCallback: true
  }, function(req, accessToken, refreshToken, profile, done) {
    var newUser;
    if (!req.user) {
      newUser = new User({
        profile_id: profile.id,
        name: profile.displayName,
        accessToken: accessToken,
        refreshToken: refreshToken
      });
      if (refreshToken != null) {
        User.update({
          profile_id: profile.id
        }, {
          $set: {
            name: profile.displayName,
            accessToken: accessToken,
            refreshToken: refreshToken
          }
        }, {
          upsert: true
        }, function() {
          return console.log("Inserted/updated user in database. Changed refresh token.");
        });
      } else {
        User.update({
          profile_id: profile.id
        }, {
          $set: {
            name: profile.displayName,
            accessToken: accessToken
          }
        }, {
          upsert: true
        }, function() {
          return console.log("Updated user in database. Did not change refresh token.");
        });
      }
      return done(null, newUser);
    } else {
      console.log("Already authenticated!");
      return done(null, req.user);
    }
  }));

  ensureAuthenticated = function(req, res, next) {
    if (req.isAuthenticated()) {
      return next();
    } else {
      return res.redirect('/auth/google');
    }
  };

  app = express();

  app.configure(function() {
    app.set('port', process.env.PORT || 3000);
    app.set('views', __dirname + '/views');
    app.set('view engine', 'ejs');
    app.use(express.favicon());
    app.use(express.logger('dev'));
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.use(express.session({
      secret: "ZEgpCugJaH"
    }));
    app.use(passport.initialize());
    app.use(passport.session());
    app.use(app.router);
    return app.use(express["static"](path.join(__dirname, 'public')));
  });

  app.configure('development', function() {
    return app.use(express.errorHandler());
  });

  app.get('/contacts', ensureAuthenticated, function(req, res) {
    return res.render('contacts.ejs', {
      user: req.user
    });
  });

  app.get('/auth/google', passport.authenticate('google', {
    scope: ['https://www.googleapis.com/auth/userinfo.profile', 'https://www.google.com/m8/feeds'],
    accessType: 'offline'
  }));

  app.get('/auth/google/callback', passport.authenticate('google', {
    successRedirect: "/contacts",
    failureRedirect: "/loginerror"
  }));

  app.get('/logout', function(req, res) {
    req.logout();
    return res.redirect('/');
  });

  app.get('/api/users', function(req, res) {
    return User.find(function(err, users) {
      return res.json(users);
    });
  });

  app.get('/api/users/:id', function(req, res) {
    return User.findById("user_" + req.params.id, function(err, user) {
      return res.json(user);
    });
  });

  app.get('/api/me', ensureAuthenticated, function(req, res) {
    return User.findById("user_" + req.user.profile_id, function(err, user) {
      return res.json(user);
    });
  });

  app.get('/api/contacts', ensureAuthenticated, function(req, res) {
    return refreshContacts(req.user.accessToken, req.user.profile_id, function(result) {
      var addr, email, entries, entry, id, name, num, parsed_entries, phone, raw_id, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
      entries = JSON.parse(result).feed.entry;
      parsed_entries = [];
      for (_i = 0, _len = entries.length; _i < _len; _i++) {
        entry = entries[_i];
        id = "";
        name = "";
        email = [];
        phone = [];
        if ((entry.id != null) && (entry.id['$t'] != null)) {
          raw_id = entry.id['$t'];
          id = raw_id.match(/[^/]+$/);
        }
        if ((entry.title != null) && entry.title['$t'] !== "") {
          name = entry.title['$t'];
        } else {
          if ((entry['gd$email'] != null) && entry['gd$email'][0].address) {
            name = entry['gd$email'][0].address;
          } else {
            name = "<unnamed contact>";
          }
        }
        if (entry['gd$email'] != null) {
          _ref = entry['gd$email'];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            addr = _ref[_j];
            if (addr.address != null) {
              email.push(addr.address);
            }
          }
        }
        if (entry['gd$phoneNumber'] != null) {
          _ref1 = entry['gd$phoneNumber'];
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            num = _ref1[_k];
            if (num['$t'] != null) {
              phone.push(num['$t']);
            }
          }
        }
        parsed_entries.push({
          "id": id,
          "name": name,
          "email": email,
          "phone": phone
        });
      }
      return res.json(parsed_entries);
    });
  });

  app.get('/api/photo/:id', ensureAuthenticated, function(req, res) {
    return getPhoto(req.params.id, req.user.accessToken, req.user.profile_id, res);
  });

  getPhoto = function(contact_id, accessToken, user_id, res) {
    var api_req, options, req_authorization, req_path;
    req_authorization = "Bearer " + accessToken;
    req_path = "/m8/feeds/photos/media/default/" + contact_id;
    if (!/^[a-zA-Z0-9_]*$/.test(contact_id)) {
      return callback("Invalid contact photo path.");
    }
    options = {
      host: 'www.google.com',
      port: 443,
      path: req_path,
      method: 'GET',
      headers: {
        'GData-Version': '3.0',
        'Content-length': '0',
        'Authorization': req_authorization
      }
    };
    api_req = https.request(options, function(api_res) {
      var img;
      if (api_req.res.statusCode === 404) {
        img = fs.readFileSync(path.join(__dirname, 'public', 'images', 'person.png'));
        res.writeHead(200, {
          'Content-Type': 'image/png'
        });
        res.end(img, 'binary');
        return;
      }
      res.setHeader("Content-Type", api_req.res.headers['content-type']);
      api_res.on('error', function(e) {
        return refreshToken(user_id, function() {
          return getPhoto(contact_id, accessToken, user_id, res);
        });
      });
      api_res.on('data', function(chunk) {
        return res.write(chunk, 'binary');
      });
      return api_res.on('end', function() {
        return res.end();
      });
    });
    return api_req.end();
  };

  refreshContacts = function(accessToken, user_id, callback) {
    var api_req, options, req_authorization;
    req_authorization = "Bearer " + accessToken;
    options = {
      host: 'www.google.com',
      port: 443,
      path: '/m8/feeds/contacts/default/full?max-results=75000&alt=json',
      method: 'GET',
      headers: {
        'GData-Version': '3.0',
        'Content-length': '0',
        'Authorization': req_authorization
      }
    };
    api_req = https.request(options, function(api_res) {
      var buffer;
      buffer = "";
      api_res.setEncoding('utf8');
      api_res.on('error', function(e) {
        return refreshToken(user_id, function() {
          return refreshContacts(accessToken, user_id, callback);
        });
      });
      api_res.on('data', function(chunk) {
        return buffer += chunk;
      });
      return api_res.on('end', function() {
        return callback(buffer);
      });
    });
    return api_req.end();
  };

  refreshToken = function(user_id, callback) {
    console.log("Refreshing access token for user " + user_id + "...");
    return User.findById("user_" + user_id, function(err, user) {
      var options, post_data, previous_token, refresh_token, req;
      if (err) {
        console.error("Couldn't refresh access token because user isn't registered.");
      }
      previous_token = user.accessToken;
      refresh_token = user.refreshToken;
      post_data = qs.stringify({
        'client_id': conf.google.clientID,
        'client_secret': conf.google.clientSecret,
        'refresh_token': refresh_token,
        'grant_type': 'refresh_token'
      });
      options = {
        host: 'accounts.google.com',
        port: 443,
        path: '/o/oauth2/token',
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      };
      req = https.request(options, function(res) {
        res.setEncoding('utf8');
        console.log("Making request for new access token using refresh token: " + refresh_token);
        return res.on('data', function(data) {
          var access_token;
          data = JSON.parse(data);
          if (data.access_token != null) {
            console.log("New access token granted: " + data.access_token);
            access_token = data.access_token;
            if (previous_token !== access_token) {
              return User.update({
                profile_id: user_id
              }, {
                $set: {
                  accessToken: access_token
                }
              }, {
                upsert: true
              }, function() {
                console.log("Updated refresh token in database.");
                return callback();
              });
            } else {
              return console.error("ERROR: Could not refresh access token.");
            }
          }
        });
      });
      req.write(post_data);
      return req.end();
    });
  };

  http.createServer(app).listen(app.get('port'), function() {
    return console.log("Express server listening on port " + (app.get('port')));
  });

}).call(this);
